"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[64016],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>m});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=a.createContext({}),l=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},d=function(e){var t=l(e.components);return a.createElement(p.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,p=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),c=l(n),m=r,h=c["".concat(p,".").concat(m)]||c[m]||u[m]||i;return n?a.createElement(h,o(o({ref:t},d),{},{components:n})):a.createElement(h,o({ref:t},d))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=c;var s={};for(var p in t)hasOwnProperty.call(t,p)&&(s[p]=t[p]);s.originalType=e,s.mdxType="string"==typeof e?e:r,o[1]=s;for(var l=2;l<i;l++)o[l]=n[l];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},9949:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>p,default:()=>m,frontMatter:()=>s,metadata:()=>l,toc:()=>u});n(67294);var a=n(3905);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){return t=null!=t?t:{},Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):function(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))})),e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}const s={title:"Setting Up the Client App",description:"We'll initialize our Pixels app using refine and get familiar with the boilerplate code to be created with the create refine-app CLI tool.",slug:"refine-pixels-2",authors:"abdullah_numan",tags:["refine-week","refine","supabase"],image:"https://refine.ams3.cdn.digitaloceanspaces.com/blog/2023-02-05-refine-pixels-2/social.png",hide_table_of_contents:!1},p=void 0,l={permalink:"/blog/refine-pixels-2",source:"@site/blog/2023-02-15-refine-pixels-2.md",title:"Setting Up the Client App",description:"We'll initialize our Pixels app using refine and get familiar with the boilerplate code to be created with the create refine-app CLI tool.",date:"2023-02-15T00:00:00.000Z",formattedDate:"February 15, 2023",tags:[{label:"refine-week",permalink:"/blog/tags/refine-week"},{label:"refine",permalink:"/blog/tags/refine"},{label:"supabase",permalink:"/blog/tags/supabase"}],readingTime:13.64,hasTruncateMarker:!1,authors:[{name:"Abdullah Numan",title:"Fullstack Developer",url:"https://github.com/anewman15/",imageURL:"https://github.com/anewman15.png",key:"abdullah_numan"}],frontMatter:{title:"Setting Up the Client App",description:"We'll initialize our Pixels app using refine and get familiar with the boilerplate code to be created with the create refine-app CLI tool.",slug:"refine-pixels-2",authors:"abdullah_numan",tags:["refine-week","refine","supabase"],image:"https://refine.ams3.cdn.digitaloceanspaces.com/blog/2023-02-05-refine-pixels-2/social.png",hide_table_of_contents:!1},prevItem:{title:"Adding CRUD Actions and Authentication",permalink:"/blog/refine-pixels-3"},nextItem:{title:"Pilot & refine architecture",permalink:"/blog/refine-pixels-1"},relatedPosts:[{title:"React Admin Panel Tutorial with Chakra UI and Strapi",description:"We'll build a React admin tutorial app with refine",permalink:"/blog/react-admin-tutorial",formattedDate:"March 3, 2023",authors:[{name:"Peter Osah",title:"Web Developer",imageURL:"/img/generic-profile.png",key:"peter_osah"}],readingTime:24.98,date:"2023-03-03T00:00:00.000Z"},{title:"How to Build a React Admin Panel with Mantine and Strapi",description:"We'll be building a simple React Admin Panel with refine and Mantine using Strapi as a backend service.",permalink:"/blog/react-admin-panel",formattedDate:"February 23, 2023",authors:[{name:"Joseph Mawa",title:"Web Developer",url:"https://github.com/nibble0101",imageURL:"/img/generic-profile.png",key:"joseph_mawa"}],readingTime:22.05,date:"2023-02-23T00:00:00.000Z"},{title:"Setting Up the Invoicer App",description:"We start with setting up the Invoicer app by choosing Ant Design as a UI framework and Strapi as a dataprovider",permalink:"/blog/refine-react-invoice-generator-2",formattedDate:"April 11, 2023",authors:[{name:"Abdullah Numan",title:"Fullstack Developer",url:"https://github.com/anewman15/",imageURL:"https://github.com/anewman15.png",key:"abdullah_numan"}],readingTime:19.165,date:"2023-04-11T00:00:00.000Z"}],authorPosts:[{title:"Setting Up the Invoicer App",description:"We start with setting up the Invoicer app by choosing Ant Design as a UI framework and Strapi as a dataprovider",permalink:"/blog/refine-react-invoice-generator-2",formattedDate:"April 11, 2023",authors:[{name:"Abdullah Numan",title:"Fullstack Developer",url:"https://github.com/anewman15/",imageURL:"https://github.com/anewman15.png",key:"abdullah_numan"}],readingTime:19.165,date:"2023-04-11T00:00:00.000Z"},{title:"React useMemo hook guide with examples",description:"Improve the React app performance with useMemo() hook",permalink:"/blog/react-usememo",formattedDate:"September 16, 2022",authors:[{name:"Abdullah Numan",title:"Fullstack Developer",url:"https://github.com/anewman15/",imageURL:"https://github.com/anewman15.png",key:"abdullah_numan"}],readingTime:5.02,date:"2022-09-16T00:00:00.000Z"},{title:"TypeScript Record Type with Examples",description:"We'll explore TypeScript Record type with examples.",permalink:"/blog/typescript-record-type",formattedDate:"June 16, 2023",authors:[{name:"Abdullah Numan",title:"Fullstack Developer",url:"https://github.com/anewman15/",imageURL:"https://github.com/anewman15.png",key:"abdullah_numan"}],readingTime:6.24,date:"2023-06-16T00:00:00.000Z"}]},d={authorsImageUrls:[void 0]},u=[{value:"refineWeek series",id:"refineweek-series",level:3},{value:"Overview",id:"overview",level:2},{value:"Project Setup",id:"project-setup",level:2},{value:"Exploring the App",id:"exploring-the-app",level:2},{value:"The <code>&lt;Refine /&gt;</code> Component",id:"the-refine--component",level:3},{value:"<code>&lt;Refine /&gt;</code>&#39;s <code>dataProvider</code> Prop",id:"refine-s-dataprovider-prop",level:3},{value:"<strong>refine</strong>&#39;s <code>supabaseClient</code>",id:"refines-supabaseclient",level:3},{value:"<code>&lt;Refine /&gt;</code>&#39;s <code>authProvider</code> Prop",id:"refine-s-authprovider-prop",level:3},{value:"Summary",id:"summary",level:2}],c={toc:u};function m(e){var{components:t}=e,n=o(e,["components"]);return(0,a.kt)("wrapper",i(function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{},a=Object.keys(n);"function"==typeof Object.getOwnPropertySymbols&&(a=a.concat(Object.getOwnPropertySymbols(n).filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable})))),a.forEach((function(t){r(e,t,n[t])}))}return e}({},c,n),{components:t,mdxType:"MDXLayout"}),(0,a.kt)("admonition",{type:"caution"},(0,a.kt)("p",{parentName:"admonition"},"This post was created using version 3.x.x of ",(0,a.kt)("strong",{parentName:"p"},"refine"),". Although we plan to update it with the latest version of ",(0,a.kt)("strong",{parentName:"p"},"refine")," as soon as possible, you can still benefit from the post in the meantime."),(0,a.kt)("p",{parentName:"admonition"},"You should know that ",(0,a.kt)("strong",{parentName:"p"},"refine")," version 4.x.x is backward compatible with version 3.x.x, so there is no need to worry. If you want to see the differences between the two versions, check out the ",(0,a.kt)("a",{parentName:"p",href:"https://refine.dev/docs/migration-guide/"},"migration guide"),"."),(0,a.kt)("p",{parentName:"admonition"},"Just be aware that the source code examples in this post have been updated to version 4.x.x.")),(0,a.kt)("p",null,"In this episode, we initialize our ",(0,a.kt)("strong",{parentName:"p"},"Pixels")," app using ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/refinedev/refine"},(0,a.kt)("strong",{parentName:"a"},"refine"))," and get familiar with the boilerplate code to be created with the ",(0,a.kt)("inlineCode",{parentName:"p"},"create refine-app")," CLI tool."),(0,a.kt)("p",null,"This is Day 2 of the ",(0,a.kt)("a",{parentName:"p",href:"https://refine.dev/week-of-refine/"},(0,a.kt)("strong",{parentName:"a"},"refineWeek"))," series. ",(0,a.kt)("strong",{parentName:"p"},"refineWeek")," is a seven-part tutorial that aims to help developers learn the ins-and-outs of ",(0,a.kt)("strong",{parentName:"p"},"refine"),"'s powerful capabilities and get going with ",(0,a.kt)("strong",{parentName:"p"},"refine")," within a week."),(0,a.kt)("h3",{id:"refineweek-series"},"refineWeek series"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Day 1 - ",(0,a.kt)("a",{parentName:"li",href:"https://refine.dev/blog/refine-pixels-1/"},"Pilot & refine architecture"))),(0,a.kt)("h2",{id:"overview"},"Overview"),(0,a.kt)("p",null,"In the previous post, we got a preview of ",(0,a.kt)("strong",{parentName:"p"},"refine"),"'s underlying architecture, especially on how ",(0,a.kt)("strong",{parentName:"p"},"refine"),"'s core modules abstract and divide an app's logic inside individual providers and allow their methods to be easily accessed and executed with hooks from inside consumer components. This abstraction at the providers layer is where ",(0,a.kt)("strong",{parentName:"p"},"refine")," shines and require extensive configuration to begin with."),(0,a.kt)("p",null,"In this part, we will get into the details of two important providers: namely, the ",(0,a.kt)("a",{parentName:"p",href:"https://refine.dev/docs/tutorial/understanding-dataprovider/index/"},(0,a.kt)("inlineCode",{parentName:"a"},"dataProvider"))," and ",(0,a.kt)("a",{parentName:"p",href:"https://refine.dev/docs/tutorial/understanding-authprovider/index/"},(0,a.kt)("inlineCode",{parentName:"a"},"authProvider"))," props of our ",(0,a.kt)("a",{parentName:"p",href:"http://localhost:3000/docs/api-reference/core/components/refine-config/"},(0,a.kt)("inlineCode",{parentName:"a"},"<Refine />"))," component. We will be building on this knowledge in the coming episodes."),(0,a.kt)("p",null,"The providers will be generated by the ",(0,a.kt)("inlineCode",{parentName:"p"},"create refine-app")," CLI tool based on our choice, so we'll start off with setting up the ",(0,a.kt)("strong",{parentName:"p"},"Pixels")," app right away."),(0,a.kt)("h2",{id:"project-setup"},"Project Setup"),(0,a.kt)("p",null,"For this project, we are using a PostgreSQL database hosted in the ",(0,a.kt)("a",{parentName:"p",href:"https://supabase.com/"},(0,a.kt)("strong",{parentName:"a"},"Supabase"))," cloud. ",(0,a.kt)("strong",{parentName:"p"},"refine")," comes with an optional package for ",(0,a.kt)("strong",{parentName:"p"},"Supabase")," that gives us ",(0,a.kt)("inlineCode",{parentName:"p"},"dataProvider")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"authProvider"),"s out-of-the-box for handling requests for CRUD actions, authentication and authorization against models hosted in a ",(0,a.kt)("strong",{parentName:"p"},"Supabase")," server."),(0,a.kt)("p",null,"We are going to include ",(0,a.kt)("strong",{parentName:"p"},"refine"),"'s Ant Design package for the UI side."),(0,a.kt)("p",null,"Let's go ahead and use the ",(0,a.kt)("inlineCode",{parentName:"p"},"create refine-app")," CLI tool to interactively initialize the project. Navigate to a folder of your choice and run:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"npm create refine-app@latest pixels -- -b v3\n")),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"create refine-app")," presents us with a set of questions for choosing the libraries and frameworks we want to work with. We'll initialize a ",(0,a.kt)("strong",{parentName:"p"},"refine")," project with ",(0,a.kt)("inlineCode",{parentName:"p"},"craco")," to manage our configurations. Other important things are to be able to customize our ",(0,a.kt)("strong",{parentName:"p"},"Ant Design")," theme and layout.  "),(0,a.kt)("p",null,"So, I chose the following options:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"\u2714 Choose a project template \xb7 refine(CRA)\n\u2714 What would you like to name your project?: \xb7 pixels\n\u2714 Choose your backend service to connect: \xb7 Supabase\n\u2714 Do you want to use a UI Framework?: \xb7 Ant Design\n\u2714 Do you want to add example pages?: \xb7 no\n\u2714 Do you want to add dark mode support?: \xb7 no\n\u2714 Do you want to customize the Ant Design layout?: \xb7 yes\n\u2714 Do you need i18n (Internationalization) support?: \xb7 no\n\u2714 Do you want to add kbar command interface support?: \xb7 no\n\u2714 Would you mind sending us your choices so that we can improve superplate? \xb7 yes\n")),(0,a.kt)("p",null,"This should create a rudimentary ",(0,a.kt)("strong",{parentName:"p"},"refine")," app that supports ",(0,a.kt)("a",{parentName:"p",href:"https://ant.design/"},(0,a.kt)("strong",{parentName:"a"},"Ant Design"))," in the UI and ",(0,a.kt)("a",{parentName:"p",href:"https://supabase.com/"},(0,a.kt)("strong",{parentName:"a"},"Supabase"))," in the backend. If we open the app in our code editor, we can see that ",(0,a.kt)("strong",{parentName:"p"},"refine"),"'s optional packages for ",(0,a.kt)("strong",{parentName:"p"},"Ant Design")," and ",(0,a.kt)("strong",{parentName:"p"},"Supabase")," are added to ",(0,a.kt)("inlineCode",{parentName:"p"},"package.json"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-json",metastring:'title="package.json"',title:'"package.json"'},'"dependencies": {\n  "@refinedev/antd": "^4.7.0",\n  "@refinedev/core": "^3.18.0",\n  "@refinedev/react-router-v6": "^3.18.0",\n  "@refinedev/supabase": "^3.18.0",\n}\n')),(0,a.kt)("p",null,"We are going to use ",(0,a.kt)("strong",{parentName:"p"},"Ant Design")," components for our UI thanks to the ",(0,a.kt)("inlineCode",{parentName:"p"},"@refinedev/antd")," module. ",(0,a.kt)("inlineCode",{parentName:"p"},"@refinedev/supabase")," module allows us to use ",(0,a.kt)("strong",{parentName:"p"},"refine"),"'s ",(0,a.kt)("strong",{parentName:"p"},"Supabase")," auth and data providers."),(0,a.kt)("p",null,"We'll cover these ",(0,a.kt)("strong",{parentName:"p"},"Supabase")," related providers as we add features to our app in the upcoming episodes. However, let's try building the app for now, and check what we have in the browser after running the development server. In the terminal, run the following command:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"npm run dev\n")),(0,a.kt)("p",null,"After that, navigate to ",(0,a.kt)("inlineCode",{parentName:"p"},"http://localhost:3000"),", and lo and behold! we have a ",(0,a.kt)("strong",{parentName:"p"},"refine")," app:"),(0,a.kt)("img",{src:"https://refine.ams3.cdn.digitaloceanspaces.com/blog/2023-02-05-refine-pixels-2/welcome.png",alt:"react crud app welcome"}),(0,a.kt)("br",null),(0,a.kt)("h2",{id:"exploring-the-app"},"Exploring the App"),(0,a.kt)("p",null,"Let's now see what ",(0,a.kt)("strong",{parentName:"p"},"refine")," scaffolded for us during initialization."),(0,a.kt)("p",null,"Our main point of focus is the ",(0,a.kt)("inlineCode",{parentName:"p"},"src")," folder. And for now, especially the ",(0,a.kt)("inlineCode",{parentName:"p"},"<App />")," component."),(0,a.kt)("p",null,"If we look inside the ",(0,a.kt)("inlineCode",{parentName:"p"},"App.tsx")," file, we can see a ",(0,a.kt)("inlineCode",{parentName:"p"},"<Refine />")," component crowded with passed in ",(0,a.kt)("strong",{parentName:"p"},"props"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/App.tsx"',title:'"src/App.tsx"'},'import React from "react";\nimport { Refine } from "@refinedev/core";\nimport {\n    AuthPage,\n    notificationProvider,\n    ReadyPage,\n    ErrorComponent,\n} from "@refinedev/antd";\nimport "@refinedev/antd/dist/reset.css";\n\nimport { dataProvider, liveProvider } from "@refinedev/supabase";\nimport routerProvider from "@refinedev/react-router-v6";\nimport { supabaseClient } from "utility";\nimport { Layout } from "components/layout";\nimport authProvider from "./authProvider";\n\nfunction App() {\n    return (\n        <Refine\n            dataProvider={dataProvider(supabaseClient)}\n            liveProvider={liveProvider(supabaseClient)}\n            authProvider={authProvider}\n            routerProvider={{\n                ...routerProvider,\n                routes: [\n                    {\n                        path: "/register",\n                        element: <AuthPage type="register" />,\n                    },\n                    {\n                        path: "/forgot-password",\n                        element: <AuthPage type="forgotPassword" />,\n                    },\n                    {\n                        path: "/update-password",\n                        element: <AuthPage type="updatePassword" />,\n                    },\n                ],\n            }}\n            LoginPage={() => (\n                <AuthPage\n                    type="login"\n                    providers={[\n                        {\n                            name: "google",\n                            label: "Sign in with Google",\n                        },\n                    ]}\n                    formProps={{\n                        initialValues: {\n                            email: "info@refine.dev",\n                            password: "refine-supabase",\n                        },\n                    }}\n                />\n            )}\n            notificationProvider={notificationProvider}\n            ReadyPage={ReadyPage}\n            catchAll={<ErrorComponent />}\n            Layout={Layout}\n        />\n    );\n}\n\nexport default App;\n')),(0,a.kt)("p",null,"Today, we'll examine a few of these props so that we are ready to move to the next episode."),(0,a.kt)("h3",{id:"the-refine--component"},"The ",(0,a.kt)("inlineCode",{parentName:"h3"},"<Refine />")," Component"),(0,a.kt)("p",null,"The ",(0,a.kt)("a",{parentName:"p",href:"http://localhost:3000/docs/api-reference/core/components/refine-config/"},(0,a.kt)("inlineCode",{parentName:"a"},"<Refine />"))," component is the entry point of a ",(0,a.kt)("strong",{parentName:"p"},"refine")," app. In order to leverage the power of ",(0,a.kt)("strong",{parentName:"p"},"refine"),"'s abstraction layers, we need to have the ",(0,a.kt)("inlineCode",{parentName:"p"},"<Refine />")," component."),(0,a.kt)("p",null,"Then we have to configure the ",(0,a.kt)("inlineCode",{parentName:"p"},"<Refine />")," component with the provider objects we want to use in our app. We can see that ",(0,a.kt)("inlineCode",{parentName:"p"},"create refine-app")," already added the props for us inside ",(0,a.kt)("inlineCode",{parentName:"p"},"<Refine />")," out-of-the-box.  "),(0,a.kt)("p",null,"We will be using them in our ",(0,a.kt)("strong",{parentName:"p"},"Pixels")," app. Some provider objects like the ",(0,a.kt)("inlineCode",{parentName:"p"},"routerProvider")," or the ",(0,a.kt)("inlineCode",{parentName:"p"},"dataProvider")," are defined for us by ",(0,a.kt)("strong",{parentName:"p"},"refine"),"'s core or support modules and some like the ",(0,a.kt)("inlineCode",{parentName:"p"},"accessControlProvider")," have to be defined by ourselves."),(0,a.kt)("h3",{id:"refine-s-dataprovider-prop"},(0,a.kt)("inlineCode",{parentName:"h3"},"<Refine />"),"'s ",(0,a.kt)("inlineCode",{parentName:"h3"},"dataProvider")," Prop"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://refine.dev/docs/tutorial/understanding-dataprovider/index/"},(0,a.kt)("strong",{parentName:"a"},"refine"),"'s ",(0,a.kt)("strong",{parentName:"a"},"data provider"))," is the context which allows the app to communicate with a backend API via a ",(0,a.kt)("inlineCode",{parentName:"p"},"HTTP")," client. It subsequently makes response data returned from HTTP requests available to consumer components via a set of ",(0,a.kt)("strong",{parentName:"p"},"refine")," data hooks."),(0,a.kt)("p",null,"If we look closely, our ",(0,a.kt)("inlineCode",{parentName:"p"},"dataProvider")," prop derives a value from a call to ",(0,a.kt)("inlineCode",{parentName:"p"},"dataProvider(supabaseClient)"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/App.tsx"',title:'"src/App.tsx"'},"dataProvider={dataProvider(supabaseClient)}\n")),(0,a.kt)("p",null,"The returned object, also called the ",(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("inlineCode",{parentName:"strong"},"dataProvider"))," object, has the following signature:"),(0,a.kt)("details",null,(0,a.kt)("summary",null,"Show data provider object signature"),(0,a.kt)("p",null,(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},'const dataProvider = {\n    create: ({ resource, variables, metaData }) => Promise,\n    createMany: ({ resource, variables, metaData }) => Promise,\n    deleteOne: ({ resource, id, variables, metaData }) => Promise,\n    deleteMany: ({ resource, ids, variables, metaData }) => Promise,\n    getList: ({\n        resource,\n        pagination,\n        hasPagination,\n        sort,\n        filters,\n        metaData,\n    }) => Promise,\n    getMany: ({ resource, ids, metaData }) => Promise,\n    getOne: ({ resource, id, metaData }) => Promise,\n    update: ({ resource, id, variables, metaData }) => Promise,\n    updateMany: ({ resource, ids, variables, metaData }) => Promise,\n    custom: ({\n        url,\n        method,\n        sort,\n        filters,\n        payload,\n        query,\n        headers,\n        metaData,\n    }) => Promise,\n    getApiUrl: () => "",\n};\n\n')))),(0,a.kt)("p",null,"Each item in this object is a method that has to be defined by us or ",(0,a.kt)("strong",{parentName:"p"},"refine"),"'s packages."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"refine")," supports ",(0,a.kt)("a",{parentName:"p",href:"https://refine.dev/integrations/"},"15+ backend")," ",(0,a.kt)("inlineCode",{parentName:"p"},"dataProvider")," integrations as optional packages that come with distinct definitions of these methods that handle CRUD operations according to their underlying architectures. The full list can be found ",(0,a.kt)("a",{parentName:"p",href:"https://refine.dev/docs/packages/list-of-packages/#data-provider-packages"},"here"),"."),(0,a.kt)("p",null,"Normally, for our own backend API, we have to define each method we need for sending ",(0,a.kt)("inlineCode",{parentName:"p"},"http")," requests inside a ",(0,a.kt)("inlineCode",{parentName:"p"},"dataProvider")," object as above. But since we are using the ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/refinedev/refine/tree/master/packages/supabase"},(0,a.kt)("inlineCode",{parentName:"a"},"@refinedev/supabase"))," package, ",(0,a.kt)("inlineCode",{parentName:"p"},"dataProvider={dataProvider(supabaseClient)}")," makes the following object available to us:"),(0,a.kt)("details",null,(0,a.kt)("summary",null,"Show refine supabase data provider source code"),(0,a.kt)("p",null,(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="@refinedev/supabase/src/index.ts"',title:'"@refinedev/supabase/src/index.ts"'},'const dataProvider = (\n    supabaseClient: SupabaseClient,\n): Required<DataProvider> => {\n    return {\n        getList: async ({\n            resource,\n            hasPagination = true,\n            pagination = { current: 1, pageSize: 10 },\n            filters,\n            sort,\n            metaData,\n        }) => {\n            const { current = 1, pageSize = 10 } = pagination ?? {};\n\n            const query = supabaseClient\n                .from(resource)\n                .select(metaData?.select ?? "*", {\n                    count: "exact",\n                });\n\n            if (hasPagination) {\n                query.range((current - 1) * pageSize, current * pageSize - 1);\n            }\n\n            sort?.map((item) => {\n                const [foreignTable, field] = item.field.split(/\\.(.*)/);\n\n                if (foreignTable && field) {\n                    query\n                        .select(\n                            metaData?.select ?? `*, ${foreignTable}(${field})`,\n                        )\n                        .order(field, {\n                            ascending: item.order === "asc",\n                            foreignTable: foreignTable,\n                        });\n                } else {\n                    query.order(item.field, {\n                        ascending: item.order === "asc",\n                    });\n                }\n            });\n\n            filters?.map((item) => {\n                generateFilter(item, query);\n            });\n\n            const { data, count, error } = await query;\n\n            if (error) {\n                return handleError(error);\n            }\n\n            return {\n                data: data || [],\n                total: count || 0,\n            } as any;\n        },\n\n        getMany: async ({ resource, ids, metaData }) => {\n            const { data, error } = await supabaseClient\n                .from(resource)\n                .select(metaData?.select ?? "*")\n                .in(metaData?.id ?? "id", ids);\n\n            if (error) {\n                return handleError(error);\n            }\n\n            return {\n                data: data || [],\n            } as any;\n        },\n\n        create: async ({ resource, variables }) => {\n            const { data, error } = await supabaseClient\n                .from(resource)\n                .insert(variables);\n\n            if (error) {\n                return handleError(error);\n            }\n\n            return {\n                data: (data || [])[0] as any,\n            };\n        },\n\n        createMany: async ({ resource, variables }) => {\n            const { data, error } = await supabaseClient\n                .from(resource)\n                .insert(variables);\n\n            if (error) {\n                return handleError(error);\n            }\n\n            return {\n                data: data as any,\n            };\n        },\n\n        update: async ({ resource, id, variables, metaData }) => {\n            const query = supabaseClient.from(resource).update(variables);\n\n            if (metaData?.id) {\n                query.eq(metaData?.id, id);\n            } else {\n                query.match({ id });\n            }\n\n            const { data, error } = await query;\n            if (error) {\n                return handleError(error);\n            }\n\n            return {\n                data: (data || [])[0] as any,\n            };\n        },\n\n        updateMany: async ({ resource, ids, variables, metaData }) => {\n            const response = await Promise.all(\n                ids.map(async (id) => {\n                    const query = supabaseClient\n                        .from(resource)\n                        .update(variables);\n\n                    if (metaData?.id) {\n                        query.eq(metaData?.id, id);\n                    } else {\n                        query.match({ id });\n                    }\n\n                    const { data, error } = await query;\n                    if (error) {\n                        return handleError(error);\n                    }\n\n                    return (data || [])[0] as any;\n                }),\n            );\n\n            return {\n                data: response,\n            };\n        },\n\n        getOne: async ({ resource, id, metaData }) => {\n            const query = supabaseClient\n                .from(resource)\n                .select(metaData?.select ?? "*");\n\n            if (metaData?.id) {\n                query.eq(metaData?.id, id);\n            } else {\n                query.match({ id });\n            }\n\n            const { data, error } = await query;\n            if (error) {\n                return handleError(error);\n            }\n\n            return {\n                data: (data || [])[0] as any,\n            };\n        },\n\n        deleteOne: async ({ resource, id, metaData }) => {\n            const query = supabaseClient.from(resource).delete();\n\n            if (metaData?.id) {\n                query.eq(metaData?.id, id);\n            } else {\n                query.match({ id });\n            }\n\n            const { data, error } = await query;\n            if (error) {\n                return handleError(error);\n            }\n\n            return {\n                data: (data || [])[0] as any,\n            };\n        },\n\n        deleteMany: async ({ resource, ids, metaData }) => {\n            const response = await Promise.all(\n                ids.map(async (id) => {\n                    const query = supabaseClient.from(resource).delete();\n\n                    if (metaData?.id) {\n                        query.eq(metaData?.id, id);\n                    } else {\n                        query.match({ id });\n                    }\n\n                    const { data, error } = await query;\n                    if (error) {\n                        return handleError(error);\n                    }\n\n                    return (data || [])[0] as any;\n                }),\n            );\n\n            return {\n                data: response,\n            };\n        },\n\n        getApiUrl: () => {\n            throw Error("Not implemented on refine-supabase data provider.");\n        },\n\n        custom: () => {\n            throw Error("Not implemented on refine-supabase data provider.");\n        },\n    };\n};\n')))),(0,a.kt)("p",null,"We don't have to get into the mind of the people at ",(0,a.kt)("strong",{parentName:"p"},"refine")," yet, but if we skim over closely, the ",(0,a.kt)("inlineCode",{parentName:"p"},"dataProvider")," object above has pretty much every method we need to perform all CRUD operations against a ",(0,a.kt)("strong",{parentName:"p"},"Supabase")," database. Notable methods we are going to use in our app are: ",(0,a.kt)("inlineCode",{parentName:"p"},"create()"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"getOne()"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"getList()")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"update()"),"."),(0,a.kt)("p",null,"For the details of how these methods work, please take your time to scan through the ",(0,a.kt)("a",{parentName:"p",href:"https://refine.dev/docs/api-reference/core/providers/data-provider/"},(0,a.kt)("inlineCode",{parentName:"a"},"dataProvider")," API reference"),"."),(0,a.kt)("p",null,"In order to get the ",(0,a.kt)("strong",{parentName:"p"},"Supabase")," ",(0,a.kt)("inlineCode",{parentName:"p"},"dataProvider")," object to deliver, first a ",(0,a.kt)("inlineCode",{parentName:"p"},"supabaseClient")," has to be set up."),(0,a.kt)("h3",{id:"refines-supabaseclient"},(0,a.kt)("strong",{parentName:"h3"},"refine"),"'s ",(0,a.kt)("inlineCode",{parentName:"h3"},"supabaseClient")),(0,a.kt)("p",null,"If we look inside ",(0,a.kt)("inlineCode",{parentName:"p"},"src/utility/"),", we have a ",(0,a.kt)("inlineCode",{parentName:"p"},"supabaseClient.ts")," file containing the credentials of a client that provides us access to a ",(0,a.kt)("strong",{parentName:"p"},"Supabase")," backend:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/utility/supabaseClient.ts"',title:'"src/utility/supabaseClient.ts"'},'import { createClient } from "@refinedev/supabase";\n\nconst SUPABASE_URL = "https://ifbdnkfqbypnkmwcfdes.supabase.co";\nconst SUPABASE_KEY =\n    "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImlmYmRua2ZxYnlwbmttd2NmZGVzIiwicm9sZSI6ImFub24iLCJpYXQiOjE2NzA5MTgzOTEsImV4cCI6MTk4NjQ5NDM5MX0.ThQ40H-xay-Hi5cf7H9mKccMCvAX3iCvYVJDe0KiHtw";\n\nexport const supabaseClient = createClient(SUPABASE_URL, SUPABASE_KEY, {\n    db: {\n        schema: "public",\n    },\n    auth: {\n        persistSession: true,\n    },\n});\n')),(0,a.kt)("p",null,"This file was also generated for us by ",(0,a.kt)("inlineCode",{parentName:"p"},"create refine-app")," using ",(0,a.kt)("strong",{parentName:"p"},"refine"),"'s ",(0,a.kt)("strong",{parentName:"p"},"Supabase")," package."),(0,a.kt)("p",null,"Inside ",(0,a.kt)("inlineCode",{parentName:"p"},"<Refine />")," component, we are getting the value of the ",(0,a.kt)("inlineCode",{parentName:"p"},"dataProvider")," prop by passing in ",(0,a.kt)("inlineCode",{parentName:"p"},"supabaseClient")," to the ",(0,a.kt)("inlineCode",{parentName:"p"},"dataProvider()")," function imported from this package:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="App.tsx"',title:'"App.tsx"'},"dataProvider={dataProvider(supabaseClient)}\n")),(0,a.kt)("p",null,"We need to tweak the ",(0,a.kt)("inlineCode",{parentName:"p"},"supabaseClient.ts")," file with our own credentials, which we will do when we add ",(0,a.kt)("inlineCode",{parentName:"p"},"resources")," to our app."),(0,a.kt)("p",null,"If we inspect further, setting up ",(0,a.kt)("strong",{parentName:"p"},"Supabase")," with ",(0,a.kt)("strong",{parentName:"p"},"refine")," helps us enable not only the ",(0,a.kt)("inlineCode",{parentName:"p"},"dataProvider")," prop, but also the ",(0,a.kt)("inlineCode",{parentName:"p"},"authProvider")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"liveProvider")," props inside ",(0,a.kt)("inlineCode",{parentName:"p"},"<Refine />"),". This is because they all depend on ",(0,a.kt)("inlineCode",{parentName:"p"},"supabaseClient")," to send ",(0,a.kt)("inlineCode",{parentName:"p"},"http")," requests. We'll explore the ",(0,a.kt)("inlineCode",{parentName:"p"},"liveProvider")," prop on Day 4, but let's also look at the ",(0,a.kt)("inlineCode",{parentName:"p"},"authProvider")," here to enhance our understanding."),(0,a.kt)("h3",{id:"refine-s-authprovider-prop"},(0,a.kt)("inlineCode",{parentName:"h3"},"<Refine />"),"'s ",(0,a.kt)("inlineCode",{parentName:"h3"},"authProvider")," Prop"),(0,a.kt)("p",null,"We can clearly see in our ",(0,a.kt)("inlineCode",{parentName:"p"},"<Refine />")," component that ",(0,a.kt)("inlineCode",{parentName:"p"},"create refine-app")," already enabled the ",(0,a.kt)("inlineCode",{parentName:"p"},"authProvider")," prop by passing in the corresponding object for us:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="App.tsx"',title:'"App.tsx"'},"authProvider={authProvider}\n")),(0,a.kt)("p",null,"Earlier on, the ",(0,a.kt)("inlineCode",{parentName:"p"},"authProvider")," object was already created by ",(0,a.kt)("inlineCode",{parentName:"p"},"create refine-app")," inside the ",(0,a.kt)("inlineCode",{parentName:"p"},"authProvider.ts")," file:"),(0,a.kt)("details",null,(0,a.kt)("summary",null,"Show refine supabase auth provider source code"),(0,a.kt)("p",null,(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/authProvider.ts"',title:'"src/authProvider.ts"'},'import { AuthProvider } from "@refinedev/core";\nimport { supabaseClient } from "utility";\n\nexport const authProvider: AuthProvider = {\n    login: async ({ email, password, providerName }) => {\n        // sign in with oauth\n        if (providerName) {\n            const { data, error } = await supabaseClient.auth.signInWithOAuth({\n                provider: providerName,\n            });\n\n            if (error) {\n                return Promise.reject(error);\n            }\n\n            if (data?.url) {\n                return Promise.resolve(false);\n            }\n        }\n\n        // sign in with email and password\n        const { data, error } = await supabaseClient.auth.signInWithPassword({\n            email,\n            password,\n        });\n\n        if (error) {\n            return Promise.reject(error);\n        }\n\n        if (data?.user) {\n            return Promise.resolve();\n        }\n\n        return Promise.resolve();\n    },\n    register: async ({ email, password }) => {\n        const { data, error } = await supabaseClient.auth.signUp({\n            email,\n            password,\n        });\n\n        if (error) {\n            return Promise.reject(error);\n        }\n\n        if (data) {\n            return Promise.resolve();\n        }\n    },\n    forgotPassword: async ({ email }) => {\n        const { data, error } = await supabaseClient.auth.resetPasswordForEmail(\n            email,\n            {\n                redirectTo: `${window.location.origin}/update-password`,\n            },\n        );\n\n        if (error) {\n            return Promise.reject(error);\n        }\n\n        if (data) {\n            return Promise.resolve();\n        }\n    },\n    updatePassword: async ({ password }) => {\n        const { data, error } = await supabaseClient.auth.updateUser({\n            password,\n        });\n\n        if (error) {\n            return Promise.reject(error);\n        }\n\n        if (data) {\n            return Promise.resolve("/");\n        }\n    },\n    logout: async () => {\n        const { error } = await supabaseClient.auth.signOut();\n\n        if (error) {\n            return Promise.reject(error);\n        }\n\n        return Promise.resolve("/");\n    },\n    checkError: () => Promise.resolve(),\n    checkAuth: async () => {\n        await supabaseClient.auth.getSession();\n        return Promise.resolve();\n    },\n    getPermissions: async () => {\n        const { data } = await supabaseClient.auth.getUser();\n        const { user } = data;\n\n        if (user) {\n            return Promise.resolve(user.role);\n        }\n    },\n    getUserIdentity: async () => {\n        const { data } = await supabaseClient.auth.getUser();\n        const { user } = data;\n\n        if (user) {\n            return Promise.resolve({\n                ...user,\n                name: user.email,\n            });\n        }\n\n        return Promise.reject();\n    },\n};\n')))),(0,a.kt)("p",null,"This object has all the methods we need to implement an email / password based authentication and authorization system in our app."),(0,a.kt)("p",null,"Notice, as mentioned before, that ",(0,a.kt)("inlineCode",{parentName:"p"},"authProvider")," relies on ",(0,a.kt)("inlineCode",{parentName:"p"},"supabaseClient")," to connect to our ",(0,a.kt)("strong",{parentName:"p"},"Supabase")," database. So, in this case, our ",(0,a.kt)("inlineCode",{parentName:"p"},"authoProvider")," was generated as part of the ",(0,a.kt)("strong",{parentName:"p"},"Supabase")," package."),(0,a.kt)("p",null,"As we can infer by now, although we have stated that ",(0,a.kt)("strong",{parentName:"p"},"refine")," performs and manages a lot of heavylifting and simplifies the app logic by dividing concerns into separate contexts, providers and hooks, ",(0,a.kt)("em",{parentName:"p"},"configuring")," all these providers is a heavy task itself."),(0,a.kt)("p",null,"It, fortunately, makes configuration easier by composing individual providers inside a single object."),(0,a.kt)("p",null,"These are pretty much the essentials we should get familiar with in order to accept the invitation to add ",(0,a.kt)("inlineCode",{parentName:"p"},"resources")," to the ",(0,a.kt)("inlineCode",{parentName:"p"},"<Refine />")," component."),(0,a.kt)("h2",{id:"summary"},"Summary"),(0,a.kt)("p",null,"In this post, we went through the process of initializing our ",(0,a.kt)("strong",{parentName:"p"},"Pixels")," app with a ",(0,a.kt)("strong",{parentName:"p"},"Supabase")," hosted PostgreSQL database and ",(0,a.kt)("strong",{parentName:"p"},"Ant Design")," UI framework."),(0,a.kt)("p",null,"We then explored the boilerplate code created by ",(0,a.kt)("inlineCode",{parentName:"p"},"create refine-app")," using ",(0,a.kt)("strong",{parentName:"p"},"refine"),"'s ",(0,a.kt)("strong",{parentName:"p"},"Supabase")," support package, especially the files related to ",(0,a.kt)("inlineCode",{parentName:"p"},"dataProvider")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"authProvider")," props of the ",(0,a.kt)("inlineCode",{parentName:"p"},"<Refine />")," component. We touched on setting ",(0,a.kt)("inlineCode",{parentName:"p"},"supabaseClient")," which is used by these providers to send HTTP requests to the ",(0,a.kt)("strong",{parentName:"p"},"Supabase")," backend."),(0,a.kt)("p",null,"In the next article, we will use these providers to implement RESTful CRUD actions for creating a canvas, showing a canvas, drawing pixels on it and showing a public gallery that lists canvases. We will also add authentication to our app."))}m.isMDXComponent=!0}}]);