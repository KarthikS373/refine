"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[77297],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>m});var a=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},d=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,s=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),u=p(n),m=i,h=u["".concat(s,".").concat(m)]||u[m]||c[m]||o;return n?a.createElement(h,r(r({ref:t},d),{},{components:n})):a.createElement(h,r({ref:t},d))}));function m(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,r=new Array(o);r[0]=u;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:i,r[1]=l;for(var p=2;p<o;p++)r[p]=n[p];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},61535:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>s,default:()=>f,frontMatter:()=>l,metadata:()=>p,toc:()=>c});n(67294);var a=n(3905);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){return t=null!=t?t:{},Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):function(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))})),e}function r(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}const l={title:"How to Build a React Admin Panel with Mantine and Strapi",description:"We'll be building a simple React Admin Panel with refine and Mantine using Strapi as a backend service.",slug:"react-admin-panel",authors:"joseph_mawa",tags:["refine","strapi","mantine","tutorial","react"],image:"https://refine.ams3.cdn.digitaloceanspaces.com/blog%2F2023-02-23-refine-strapi-mantine%2Fsocial.png",hide_table_of_contents:!1,featured_image:"https://refine.ams3.cdn.digitaloceanspaces.com/blog%2F2023-02-23-refine-strapi-mantine%2Ffeatured.png"},s=void 0,p={permalink:"/blog/react-admin-panel",source:"@site/blog/2023-02-23-refine-strapi-mantine.md",title:"How to Build a React Admin Panel with Mantine and Strapi",description:"We'll be building a simple React Admin Panel with refine and Mantine using Strapi as a backend service.",date:"2023-02-23T00:00:00.000Z",formattedDate:"February 23, 2023",tags:[{label:"refine",permalink:"/blog/tags/refine"},{label:"strapi",permalink:"/blog/tags/strapi"},{label:"mantine",permalink:"/blog/tags/mantine"},{label:"tutorial",permalink:"/blog/tags/tutorial"},{label:"react",permalink:"/blog/tags/react"}],readingTime:22.05,hasTruncateMarker:!1,authors:[{name:"Joseph Mawa",title:"Web Developer",url:"https://github.com/nibble0101",imageURL:"/img/generic-profile.png",key:"joseph_mawa"}],frontMatter:{title:"How to Build a React Admin Panel with Mantine and Strapi",description:"We'll be building a simple React Admin Panel with refine and Mantine using Strapi as a backend service.",slug:"react-admin-panel",authors:"joseph_mawa",tags:["refine","strapi","mantine","tutorial","react"],image:"https://refine.ams3.cdn.digitaloceanspaces.com/blog%2F2023-02-23-refine-strapi-mantine%2Fsocial.png",hide_table_of_contents:!1,featured_image:"https://refine.ams3.cdn.digitaloceanspaces.com/blog%2F2023-02-23-refine-strapi-mantine%2Ffeatured.png"},prevItem:{title:"refine Hackaton Winners",permalink:"/blog/refine-hackathon-winners"},nextItem:{title:"Audit Log With refine",permalink:"/blog/refine-pixels-7"},relatedPosts:[{title:"How to Import CSV File with React",description:"In this guide, I will show you how to import CSV files using React and JavaScript.",permalink:"/blog/how-to-import-csv",formattedDate:"January 18, 2022",authors:[{name:"Melih Ekinci",title:"Frontend Developer",url:"https://github.com/mlhekinci",imageURL:"https://github.com/mlhekinci.png",key:"melih"}],readingTime:4.44,date:"2022-01-18T00:00:00.000Z"},{title:"How to use Material UI Card Component",description:"We'll discover the Material UI Card component with examples",permalink:"/blog/material-ui-card",formattedDate:"January 4, 2023",authors:[{name:"Doro Onome",title:"Software Developer",url:"https://github.com/Nomzy-kush",imageURL:"https://github.com/Nomzy-kush.png",key:"doro_onome"}],readingTime:12.205,date:"2023-01-04T00:00:00.000Z"},{title:"Building a Complete React CRUD App with Airtable",description:"We will be building a Complete React CRUD application using refine and Airtable, a famous backend service to illustrate how you can power your applications with refine.",permalink:"/blog/react-crud-app-airtable",formattedDate:"January 17, 2023",authors:[{name:"Peter Osah",title:"Web Developer",imageURL:"/img/generic-profile.png",key:"peter_osah"}],readingTime:25.65,date:"2023-01-17T00:00:00.000Z"}],authorPosts:[{title:"How to create a notification provider with react-toastify",description:"We'll create a custom notification provider in a refine application using react-toastify.",permalink:"/blog/react-toastify",formattedDate:"June 1, 2023",authors:[{name:"Joseph Mawa",title:"Web Developer",url:"https://github.com/nibble0101",imageURL:"/img/generic-profile.png",key:"joseph_mawa"}],readingTime:13.02,date:"2023-06-01T00:00:00.000Z"},{title:"How to use the useParams hook in React Router",description:"We'll discover how to access the parameters of the current route with the useParams hook in React Router.",permalink:"/blog/react-router-useparams",formattedDate:"September 24, 2022",authors:[{name:"Joseph Mawa",title:"Web Developer",url:"https://github.com/nibble0101",imageURL:"/img/generic-profile.png",key:"joseph_mawa"}],readingTime:4.515,date:"2022-09-24T00:00:00.000Z"},{title:"Building a React Admin Dashboard with Tremor Library",description:"We'll build a simple React admin dashboard using refine and Tremor.",permalink:"/blog/building-react-admin-dashboard-with-tremor",formattedDate:"July 2, 2023",authors:[{name:"Joseph Mawa",title:"Web Developer",url:"https://github.com/nibble0101",imageURL:"/img/generic-profile.png",key:"joseph_mawa"}],readingTime:23.625,date:"2023-07-02T00:00:00.000Z"}]},d={authorsImageUrls:[void 0]},c=[{value:"Introduction",id:"introduction",level:2},{value:"What is Strapi?",id:"what-is-strapi",level:2},{value:"What is Mantine?",id:"what-is-mantine",level:2},{value:"Setting up a refine application",id:"setting-up-a-refine-application",level:2},{value:"Step 1 \u2014 Create a refine app",id:"step-1--create-a-refine-app",level:3},{value:"Step 2 \u2014 Launch the development server",id:"step-2--launch-the-development-server",level:3},{value:"Built-in refine hooks and components for Mantine",id:"built-in-refine-hooks-and-components-for-mantine",level:2},{value:"<code>useForm</code> - For form management",id:"useform---for-form-management",level:2},{value:"<code>useTable</code> - For table management",id:"usetable---for-table-management",level:2},{value:"How to build a React admin panel with refine, Mantine and Strapi",id:"how-to-build-a-react-admin-panel-with-refine-mantine-and-strapi",level:2},{value:"How to list records",id:"how-to-list-records",level:3},{value:"Adding resources and connect pages to refine app",id:"adding-resources-and-connect-pages-to-refine-app",level:2},{value:"Setting AuthProvider",id:"setting-authprovider",level:3},{value:"How to handle relational data",id:"how-to-handle-relational-data",level:3},{value:"How to create a record",id:"how-to-create-a-record",level:3},{value:"How to edit a record",id:"how-to-edit-a-record",level:3},{value:"How to delete a record",id:"how-to-delete-a-record",level:3},{value:"How to add delete action button on each table row",id:"how-to-add-delete-action-button-on-each-table-row",level:4},{value:"How to add delete button on the edit page",id:"how-to-add-delete-button-on-the-edit-page",level:4},{value:"How to implement mutation mode",id:"how-to-implement-mutation-mode",level:2},{value:"Pessimistic mutation mode",id:"pessimistic-mutation-mode",level:3},{value:"Optimistic mutation mode",id:"optimistic-mutation-mode",level:3},{value:"Undoable mutation mode",id:"undoable-mutation-mode",level:3},{value:"How to share the current page with filters",id:"how-to-share-the-current-page-with-filters",level:2},{value:"Using the refine Mantine inferencer",id:"using-the-refine-mantine-inferencer",level:2},{value:"Conclusion",id:"conclusion",level:2},{value:"Live CodeSandbox Example",id:"live-codesandbox-example",level:2}],u=e=>function(t){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,a.kt)("div",t)},m=u("PromotionBanner"),h=u("CodeSandboxExample"),g={toc:c};function f(e){var{components:t}=e,n=r(e,["components"]);return(0,a.kt)("wrapper",o(function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{},a=Object.keys(n);"function"==typeof Object.getOwnPropertySymbols&&(a=a.concat(Object.getOwnPropertySymbols(n).filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable})))),a.forEach((function(t){i(e,t,n[t])}))}return e}({},g,n),{components:t,mdxType:"MDXLayout"}),(0,a.kt)("admonition",{type:"caution"},(0,a.kt)("p",{parentName:"admonition"},"This post was created using version 3.x.x of ",(0,a.kt)("strong",{parentName:"p"},"refine"),". Although we plan to update it with the latest version of ",(0,a.kt)("strong",{parentName:"p"},"refine")," as soon as possible, you can still benefit from the post in the meantime."),(0,a.kt)("p",{parentName:"admonition"},"You should know that ",(0,a.kt)("strong",{parentName:"p"},"refine")," version 4.x.x is backward compatible with version 3.x.x, so there is no need to worry. If you want to see the differences between the two versions, check out the ",(0,a.kt)("a",{parentName:"p",href:"https://refine.dev/docs/migration-guide/"},"migration guide"),"."),(0,a.kt)("p",{parentName:"admonition"},"Just be aware that the source code example in this post have been updated to version 4.x.x.")),(0,a.kt)("h2",{id:"introduction"},"Introduction"),(0,a.kt)("p",null,"Building complex, data-intensive front-end user interfaces(UIs) such as admin panels, dashboards, and other internal tools from scratch can be a daunting and laborious process. React frameworks such as refine make the process easier because that is a problem they are attempting to solve."),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://github.com/refinedev/refine"},"refine")," is a free, open-source, and MIT-licensed React framework for building CRUD apps. It has integrations for popular UI frameworks and design systems such as Material UI, Chakra UI, Ant Design, and Mantine. You can build any CRUD app like React admin panel."),(0,a.kt)("p",null,'Though it comes with several features out of the box, refine is customizable. If you don\'t fancy any of the above UI frameworks or design systems, you can also use "headless" refine.'),(0,a.kt)("p",null,"Every data-intensive front-end application must source data from somewhere. refine has integrations for popular content management systems and cloud databases such as Strapi, Hasura, and Firebase."),(0,a.kt)("p",null,"All the above integrations are opt-in. In this article, we will build a simple React Admin Panel using refine. We will use Mantine as the UI component library and Strapi as our back-end service."),(0,a.kt)("h2",{id:"what-is-strapi"},"What is Strapi?"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://strapi.io/"},"Strapi")," is a popular open-source headless CMS built using Node. It is flexible and has an intuitive UI. The refine ecosystem has data providers for the most popular content management systems, such as Strapi, and cloud databases like Firebase and Supabase."),(0,a.kt)("p",null,"While creating a project using the refine command line tool, select Strapi as your back-end service. The refine command line tool will bootstrap a refine application with all the requisite packages and functionalities."),(0,a.kt)("p",null,"You don't need a Strapi instance to learn how to use Strapi with refine. The refine ecosystem has a ",(0,a.kt)("a",{parentName:"p",href:"https://automatic-sweltering-dog.strapiapp.com"},"fake Strapi API")," that you can use when learning to integrate Strapi in a refine project."),(0,a.kt)("p",null,"The refine command line tool will install the ",(0,a.kt)("inlineCode",{parentName:"p"},"@refinedev/strapi-v4")," data provider when you choose it as your back-end service during project creation. You can then import and use it in your application like so:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},'import { Refine } from "@refinedev/core";\nimport { DataProvider } from "@refinedev/strapi-v4";\n\nfunction App() {\n  return (\n    <Refine\n      ...\n      dataProvider={DataProvider(`${process.env.API_URL}/api`, axiosInstance)}\n    />\n  );\n}\n')),(0,a.kt)("h2",{id:"what-is-mantine"},"What is Mantine?"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://mantine.dev/"},"Mantine"),"\xa0is a free, open-source MIT-licensed React components library. Mantine can help you build fully functional and accessible web applications fast. You can use it with most modern React frameworks such as Next, Gatsby, and Remix."),(0,a.kt)("p",null,"As highlighted above, one of the benefits of using refine is the built-in support for most of the popular design systems, UI frameworks, and component libraries. Mantine is one of the component libraries for which refine has built-in support."),(0,a.kt)("p",null,"When creating a refine application using ",(0,a.kt)("inlineCode",{parentName:"p"},"create-refine-app"),", select Mantine as the UI framework in the command prompt. The refine command line tool will bootstrap a refine application and install the necessary Mantine packages."),(0,a.kt)("p",null,"You can then import the refine Mantine components and hooks you want to use from the ",(0,a.kt)("inlineCode",{parentName:"p"},"@refinedev/mantine")," package like so:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'import { Edit, useForm, useSelect } from "@refinedev/mantine";\n')),(0,a.kt)("p",null,"The refine ecosystem comprises several hooks and components for Mantine. You can read the refine\xa0",(0,a.kt)("a",{parentName:"p",href:"https://refine.dev/docs/api-reference/mantine/"},"Mantine API documentation"),"\xa0for more on the different Mantine hooks and Components and how to use them."),(0,a.kt)("h2",{id:"setting-up-a-refine-application"},"Setting up a refine application"),(0,a.kt)("p",null,"In this article, you will learn to create a simple React admin panel with refine and Mantine using Strapi as a headless content management system. Follow the steps below to bootstrap a refine application using ",(0,a.kt)("inlineCode",{parentName:"p"},"create-refine-app"),". I assume you have the prerequisite tools highlighted above."),(0,a.kt)("h3",{id:"step-1--create-a-refine-app"},"Step 1 \u2014 Create a refine app"),(0,a.kt)("p",null,"Navigate to the directory you want to create the refine app and run the command below on the terminal."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},"# Using npm\nnpm create refine-app@latest -- -b v3\n\n# Using pnpm\npnpm create refine-app@latest -- -b v3\n")),(0,a.kt)("p",null,"Be sure to respond to the command line prompts during the installation. Select ",(0,a.kt)("inlineCode",{parentName:"p"},"refine-react")," as the project template and Strapi version 4 as the back-end service. You can choose the default for the other options. Check the guide below if you don't know how to respond to a question."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-txt"},"\u2714 Downloaded remote source successfully.\n\u2714 Choose a project template \xb7 refine-react\n\u2714 What would you like to name your project?: \xb7 refine-demo-app\n\u2714 Choose your backend service to connect: \xb7 data-provider-strapi-v4\n\u2714 Do you want to use a UI Framework?: \xb7 mantine\n\u2714 Do you want to add example pages?: \xb7 no\n\u2714 Do you want to add dark mode support?: \xb7 no\n\u2714 Do you want a customized layout?: \xb7 no\n\u2714 Do you need i18n (Internationalization) support?: \xb7 no\n\u2714 Do you want to add kbar command interface support?: \xb7 no\n\u2714 Choose a package manager: \xb7 npm\n\u2714 Would you mind sending us your choices so that we can improve superplate? \xb7 yes\n")),(0,a.kt)("h3",{id:"step-2--launch-the-development-server"},"Step 2 \u2014 Launch the development server"),(0,a.kt)("p",null,"After successfully bootstrapping a refine application, open the project directory in a text editor like VS Code and run the command below to launch the development server."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},"# Using npm\nnpm run dev\n\n# Using yarn\nyarn run dev\n\n# Using pnpm\npnpm run dev\n")),(0,a.kt)("p",null,"The command above launches the development server on local host on port 3000 in your default web browser. The landing page should look like the image below."),(0,a.kt)("img",{src:"https://refine.ams3.cdn.digitaloceanspaces.com/blog%2F2023-02-23-refine-strapi-mantine%2Frefine-project-landing-page.png",alt:"react admin panel"}),(0,a.kt)("br",null),(0,a.kt)("p",null,"If your landing page is similar to the screenshot above, you have successfully created a refine project. We will build a React admin panel by modifying the project you have just created."),(0,a.kt)("h2",{id:"built-in-refine-hooks-and-components-for-mantine"},"Built-in refine hooks and components for Mantine"),(0,a.kt)("p",null,"refine has several built-in hooks and components for Mantine. Most built-in refine Mantine hooks and components directly export or use their corresponding core Mantine hooks and components internally."),(0,a.kt)("h2",{id:"useform---for-form-management"},(0,a.kt)("inlineCode",{parentName:"h2"},"useForm")," - For form management"),(0,a.kt)("p",null,"One of the hooks we will use a lot in this article is the ",(0,a.kt)("a",{parentName:"p",href:"https://refine.dev/docs/examples/form/mantine/useForm/"},(0,a.kt)("inlineCode",{parentName:"a"},"useForm"))," hook. As its name suggests, you can use it to manage forms when working with Mantine and refine. It is based on and has all the features of the core Mantine and refine ",(0,a.kt)("inlineCode",{parentName:"p"},"useForm")," hooks with additional features."),(0,a.kt)("p",null,"The refine documentation does a great job of explaining the ",(0,a.kt)("inlineCode",{parentName:"p"},"useForm")," hook. Check it out to understand the ",(0,a.kt)("inlineCode",{parentName:"p"},"useForm")," hook in-depth and how to use it."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},'import { useForm } from "@refinedev/mantine";\n\nconst { saveButtonProps, getInputProps } = useForm({\n    initialValues: {\n        title: "",\n        status: "",\n    },\n    validate: {\n        title: (value) =>\n            value.length < 2\n                ? "Post title should be atleast 2 characters long"\n                : null,\n        status: (value) => (value.length <= 0 ? "Status is required" : null),\n    },\n});\n')),(0,a.kt)("h2",{id:"usetable---for-table-management"},(0,a.kt)("inlineCode",{parentName:"h2"},"useTable")," - For table management"),(0,a.kt)("p",null,"Another hook that we will use in this article is the ",(0,a.kt)("inlineCode",{parentName:"p"},"useTable")," hook. It is part of the\xa0",(0,a.kt)("a",{parentName:"p",href:"https://github.com/refinedev/refine/tree/master/packages/react-table"},"refine-react-table"),"\xa0package. The ",(0,a.kt)("inlineCode",{parentName:"p"},"refine-react-table")," package is an adapter for the\xa0",(0,a.kt)("a",{parentName:"p",href:"https://tanstack.com/table/v8"},"TanStack Table"),". It has all the features of the\xa0",(0,a.kt)("a",{parentName:"p",href:"https://tanstack.com/table/v8"},"TanStack Table"),"\xa0package out of the box. It also has features for filtering, sorting, and pagination."),(0,a.kt)("p",null,"Similarly, we will use basic layout and UI components such as ",(0,a.kt)("inlineCode",{parentName:"p"},"List"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"Create"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"Edit"),", and ",(0,a.kt)("inlineCode",{parentName:"p"},"Show"),". As I pointed out above, the refine documentation explains them well. Refer to the appropriate sections of the refine documentation to understand a component that might be unfamiliar to you."),(0,a.kt)("h2",{id:"how-to-build-a-react-admin-panel-with-refine-mantine-and-strapi"},"How to build a React admin panel with refine, Mantine and Strapi"),(0,a.kt)("p",null,"In this section, we will build a React admin panel with CRUD functionality using refine, Mantine and Strapi. We will utilize a fake ",(0,a.kt)("a",{parentName:"p",href:"https://automatic-sweltering-dog.strapiapp.com/api"},"Strapi version 4 API"),'. Follow the steps below if you have created a refine project by following the steps under the "Creating a refine application" section above.'),(0,a.kt)("h3",{id:"how-to-list-records"},"How to list records"),(0,a.kt)("p",null,"You should now have your application's authentication pages if you followed the previous step. However, logging in using the credentials I mentioned will open a non-existent page."),(0,a.kt)("p",null,"We need to fetch the list of posts from our Strapi API and display it when you log in. Let us start by creating an interface for the data from our Strapi API. Create a ",(0,a.kt)("inlineCode",{parentName:"p"},"src/interfaces/index.d.ts")," file. You can copy and paste the code below into it."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="src/interfaces/index.d.ts"',title:'"src/interfaces/index.d.ts"'},'export interface ICategory {\n    id: number;\n    title: string;\n}\n\nexport interface IPost {\n    id: number;\n    title: string;\n    content: string;\n    status: "published" | "draft" | "rejected";\n    category: ICategory;\n    createdAt: string;\n}\n')),(0,a.kt)("p",null,"The above interface should give you an idea of the shape of the data returned from the API. The Strapi API has the ",(0,a.kt)("inlineCode",{parentName:"p"},"posts")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"categories")," collections. There is a relation between the two collection types. Read the\xa0",(0,a.kt)("a",{parentName:"p",href:"https://refine.dev/docs/packages/documentation/data-providers/strapi-v4/"},"documentation"),"\xa0to understand how the Strapi version 4 data provider works."),(0,a.kt)("p",null,"Since we will work with blog posts, let us create a ",(0,a.kt)("inlineCode",{parentName:"p"},"posts")," directory and keep all our component files in it. Create an ",(0,a.kt)("inlineCode",{parentName:"p"},"src/pages/posts/list.tsx")," file and copy and paste the code below into it."),(0,a.kt)("details",null,(0,a.kt)("summary",null,"Show code"),(0,a.kt)("p",null,(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/pages/posts/list.tsx"',title:'"src/pages/posts/list.tsx"'},'import React from "react";\nimport { IResourceComponentsProps } from "@refinedev/core";\nimport { useTable, ColumnDef, flexRender } from "@refinedev/react-table";\nimport {\n    List,\n    Table,\n    Pagination,\n    DateField,\n    CreateButton,\n} from "@refinedev/mantine";\n\nexport const PostList: React.FC<IResourceComponentsProps> = () => {\n    const columns = React.useMemo<ColumnDef<any>[]>(\n        () => [\n            {\n                id: "id",\n                accessorKey: "id",\n                header: "Id",\n            },\n            {\n                id: "title",\n                accessorKey: "title",\n                header: "Title",\n                cell: function ({ getValue }) {\n                    return getValue();\n                },\n            },\n\n            {\n                id: "createdAt",\n                accessorKey: "createdAt",\n                header: "Created At",\n                cell: function render({ getValue }) {\n                    return <DateField format="LL" value={getValue<any>()} />;\n                },\n            },\n        ],\n        [],\n    );\n\n    const {\n        getHeaderGroups,\n        getRowModel,\n        setOptions,\n        refineCore: {\n            setCurrent,\n            pageCount,\n            current,\n            tableQueryResult: { data: tableData },\n        },\n    } = useTable({\n        columns,\n    });\n\n    setOptions((prev) => ({\n        ...prev,\n        meta: {\n            ...prev.meta,\n        },\n    }));\n\n    return (\n        <List>\n            <Table highlightOnHover striped withBorder withColumnBorders>\n                <thead>\n                    {getHeaderGroups().map((headerGroup) => (\n                        <tr key={headerGroup.id}>\n                            {headerGroup.headers.map((header) => {\n                                return (\n                                    <th key={header.id}>\n                                        {!header.isPlaceholder &&\n                                            flexRender(\n                                                header.column.columnDef.header,\n                                                header.getContext(),\n                                            )}\n                                    </th>\n                                );\n                            })}\n                        </tr>\n                    ))}\n                </thead>\n                <tbody>\n                    {getRowModel().rows.map((row) => {\n                        return (\n                            <tr key={row.id}>\n                                {row.getVisibleCells().map((cell) => {\n                                    return (\n                                        <td key={cell.id}>\n                                            {flexRender(\n                                                cell.column.columnDef.cell,\n                                                cell.getContext(),\n                                            )}\n                                        </td>\n                                    );\n                                })}\n                            </tr>\n                        );\n                    })}\n                </tbody>\n            </Table>\n            <br />\n            <Pagination\n                position="right"\n                total={pageCount}\n                page={current}\n                onChange={setCurrent}\n            />\n        </List>\n    );\n};\n')))),(0,a.kt)("p",null,"In the ",(0,a.kt)("inlineCode",{parentName:"p"},"PostList")," component above, we used the ",(0,a.kt)("inlineCode",{parentName:"p"},"useTable")," hook from the ",(0,a.kt)("inlineCode",{parentName:"p"},"refine-react-table")," package. The ",(0,a.kt)("inlineCode",{parentName:"p"},"useTable")," hook is headless by design. Therefore, the responsibility for managing the UI lies with you."),(0,a.kt)("p",null,"We imported several other UI components from the ",(0,a.kt)("inlineCode",{parentName:"p"},"@refinedev/mantine")," package. I won't explain them here. Read the\xa0",(0,a.kt)("a",{parentName:"p",href:"https://refine.dev/docs/api-reference/mantine/"},"refine Mantine"),"\xa0or the core\xa0",(0,a.kt)("a",{parentName:"p",href:"https://mantine.dev/guides/cra/"},"Mantine"),"\xa0documentation."),(0,a.kt)("p",null,"Create a ",(0,a.kt)("inlineCode",{parentName:"p"},"src/pages/posts/index.tsx")," file and add the following export statement to it."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="src/pages/posts/index.ts"',title:'"src/pages/posts/index.ts"'},'export * from "./list";\n')),(0,a.kt)("h2",{id:"adding-resources-and-connect-pages-to-refine-app"},"Adding resources and connect pages to refine app"),(0,a.kt)("p",null,"Now we are ready to start connecting to our API by adding a resource to our application"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://refine.dev/docs/tutorial/understanding-resources/index/"},"Refer to documentation for more info about ",(0,a.kt)("inlineCode",{parentName:"a"},"resources")," concept")),(0,a.kt)("p",null,"Finally, import the ",(0,a.kt)("inlineCode",{parentName:"p"},"PostList")," component you created above into the ",(0,a.kt)("inlineCode",{parentName:"p"},"App.tsx")," component and add it to the ",(0,a.kt)("inlineCode",{parentName:"p"},"resources")," prop of the ",(0,a.kt)("inlineCode",{parentName:"p"},"Refine")," component like so:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/App.tsx"',title:'"src/App.tsx"'},'...\n//highlight-next-line\nimport { PostList } from "./pages/posts";\n\nfunction App() {\n  return (\n    <MantineProvider theme={LightTheme} withNormalizeCSS withGlobalStyles>\n      <Global styles={{ body: { WebkitFontSmoothing: "auto" } }} />\n      <NotificationsProvider position="top-right">\n        <Refine\n          ...\n          //highlight-start\n          LoginPage={AuthPage}\n          resources={[\n\n            {\n              name: "posts",\n              list: PostList,\n            },\n          ]}\n         //highlight-end\n        />\n      </NotificationsProvider>\n    </MantineProvider>\n  );\n}\n')),(0,a.kt)("hr",null),(0,a.kt)(m,{isDark:!0,title:"Open-source enterprise application platform for serious web developers",description:"refineNew",image:"https://refine.ams3.cdn.digitaloceanspaces.com/website/static/img/quick-start.gif",mdxType:"PromotionBanner"}),(0,a.kt)("hr",null),(0,a.kt)("h3",{id:"setting-authprovider"},"Setting AuthProvider"),(0,a.kt)("p",null,"Similarly, ",(0,a.kt)("inlineCode",{parentName:"p"},"create-refine-app")," bootstraps a refine application with default ",(0,a.kt)("inlineCode",{parentName:"p"},"AuthProvider"),". You should have the ",(0,a.kt)("inlineCode",{parentName:"p"},"src/authProvider.ts")," file if you created the application using ",(0,a.kt)("inlineCode",{parentName:"p"},"create-react-app")," while following the steps above."),(0,a.kt)("p",null,"Of particular interest is the login method of the ",(0,a.kt)("inlineCode",{parentName:"p"},"authProvider"),". We will use email and password to log into our application. Be sure the login method has the code below."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="src/authProvider.ts"',title:'"src/authProvider.ts"'},'import type { AuthBindings } from "@refinedev/core";\n\nexport const authProvider: AuthBindings = {\n  //highlight-start\n  login: async ({ email, password }) => {\n\n    const { data, status } = await strapiAuthHelper.login(email, password);\n    //highlight-end\n    if (status === 200) {\n      localStorage.setItem(TOKEN_KEY, data.jwt);\n\n      // set header axios instance\n      axiosInstance.defaults.headers.common = {\n        Authorization: `Bearer ${data.jwt}`,\n      };\n\n      return {\n        success: true,\n        redirectTo: "/",\n      }\n    }\n    return {\n      success: false,\n      message: "Invalid email or password",\n    }\n  },\n  ...\n};\n')),(0,a.kt)("p",null,"After setting up your resources and providers as described above, the landing page should redirect you to the login page. The login page looks like the image below."),(0,a.kt)("p",null,"For this demonstration, use the credentials below to log into an existing account. It is a fake Strapi instance set up for development. Be sure to use it responsibly."),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"Email: ",(0,a.kt)("a",{parentName:"p",href:"mailto:demo@refine.dev"},"demo@refine.dev"),"\nPassword: demodemo")),(0,a.kt)("img",{src:"https://refine.ams3.cdn.digitaloceanspaces.com/blog%2F2023-02-23-refine-strapi-mantine%2Frefine-project-login-page.png",alt:"react admin panel"}),(0,a.kt)("br",null),(0,a.kt)("p",null,"When you log into your refine application, you should have a table similar to the image below. Though still incomplete, it is a simple React admin panel."),(0,a.kt)("img",{src:"https://refine.ams3.cdn.digitaloceanspaces.com/blog%2F2023-02-23-refine-strapi-mantine%2Flist_new.png",alt:"react admin panel"}),(0,a.kt)("br",null),(0,a.kt)("h3",{id:"how-to-handle-relational-data"},"How to handle relational data"),(0,a.kt)("p",null,"As highlighted in the previous section, our Strapi API has ",(0,a.kt)("inlineCode",{parentName:"p"},"posts")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"categories")," collections with relational fields. However, Strapi version 4 doesn't populate relational data out of the box when fetching entries in a collection."),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://refine.dev/docs/packages/documentation/data-providers/strapi-v4/#relations-population"},"Refer to documentation for more info about relation populate.")),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://refine.dev/docs/tutorial/adding-crud-pages/mantine/index/#handling-relationships"},"Refer to tutorial section for more info about handling relationships.")),(0,a.kt)("p",null,"Therefore, for our data provider to return the categories for each post, we need to specify using the ",(0,a.kt)("inlineCode",{parentName:"p"},"populate")," field of the ",(0,a.kt)("inlineCode",{parentName:"p"},"metaData")," property in the object we pass to the ",(0,a.kt)("inlineCode",{parentName:"p"},"useTable")," hook."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/pages/posts/list.tsx"',title:'"src/pages/posts/list.tsx"'},"...\nimport { useTable } from '@refinedev/react-table';\n\nconst {\n    getHeaderGroups,\n    getRowModel,\n    setOptions,\n    refineCore: {\n      setCurrent,\n      pageCount,\n      current,\n      tableQueryResult: { data: tableData },\n    },\n  } = useTable({\n    columns,\n    //highlight-start\n    refineCoreProps: {\n      metaData: {\n        populate: [\"category\"],\n      },\n    },\n    //highlight-end\n  });\n...\n")),(0,a.kt)("p",null,"After modifying your code, like in the example above, the data provider will also fetch the category for each post. Each post object in the array that the ",(0,a.kt)("inlineCode",{parentName:"p"},"useTable")," hook returns will contain the category field."),(0,a.kt)("p",null,"Since each post object now has a category field, we need to add a category column to our table. Modify the column array, which you passed to the ",(0,a.kt)("inlineCode",{parentName:"p"},"useTable")," hook, to include the ",(0,a.kt)("inlineCode",{parentName:"p"},"Category")," column like in the example below."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/pages/posts/list.tsx"',title:'"src/pages/posts/list.tsx"'},'...\n const columns = React.useMemo<ColumnDef<any>[]>(\n  () => [\n    ...\n    //highlight-start\n    {\n      id: "category",\n      header: "Category",\n      accessorFn: ({ category }) => {\n        return category?.title;\n      },\n    },\n    //highlight-end\n    ...\n  ],\n  []\n);\n...\n')),(0,a.kt)("p",null,"The code above should modify your table to include a Category column like the image below."),(0,a.kt)("img",{src:"https://refine.ams3.cdn.digitaloceanspaces.com/blog%2F2023-02-23-refine-strapi-mantine%2Flist_with_category.png",alt:"react admin panel"}),(0,a.kt)("br",null),(0,a.kt)("h3",{id:"how-to-create-a-record"},"How to create a record"),(0,a.kt)("p",null,"In the previous sections, you learned how to fetch the list of posts from the Strapi API whenever the user logs in. However, in an React admin panel, you should also be able to create a new record. And that is what you will learn in this section."),(0,a.kt)("p",null,"By default, refine adds a create button to the ",(0,a.kt)("inlineCode",{parentName:"p"},"List")," component. You should see it in the top right corner. However, clicking the create button will open a non-existent page."),(0,a.kt)("p",null,"We need to create a component that will render when a user clicks the create button. The component will contain the form we shall use to create a new post. Create the ",(0,a.kt)("inlineCode",{parentName:"p"},"src/pages/posts/create.tsx")," file. You can copy and paste the code below into it."),(0,a.kt)("details",null,(0,a.kt)("summary",null,"Show code"),(0,a.kt)("p",null,(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/pages/posts/create.tsx"',title:'"src/pages/posts/create.tsx"'},'import {\n    Create,\n    useForm,\n    TextInput,\n    useSelect,\n    Select,\n} from "@refinedev/mantine";\n\nimport { ICategory } from "interfaces";\n\nexport const PostCreate = () => {\n    const {\n        getInputProps,\n        saveButtonProps,\n        refineCore: { formLoading },\n    } = useForm({\n        initialValues: {\n            title: "",\n            category: {\n                id: "",\n            },\n            status: "",\n        },\n        validate: {\n            title: (value) =>\n                value.length < 5\n                    ? "Title should be atleast 5 characters long"\n                    : null,\n            category: {\n                id: (value) => (value.length <= 0 ? "Title is required" : null),\n            },\n            status: (value) =>\n                value.length <= 0 ? "Status is required" : null,\n        },\n    });\n\n    const { selectProps } = useSelect<ICategory>({\n        resource: "categories",\n    });\n\n    return (\n        <Create isLoading={formLoading} saveButtonProps={saveButtonProps}>\n            <TextInput\n                mt="sm"\n                required={true}\n                label="Title"\n                {...getInputProps("title")}\n            />\n            <Select\n                mt={8}\n                label="Status"\n                required={true}\n                placeholder="Pick one"\n                {...getInputProps("status")}\n                data={[\n                    { label: "Published", value: "published" },\n                    { label: "Draft", value: "draft" },\n                    { label: "Rejected", value: "rejected" },\n                ]}\n            />\n            <Select\n                mt={8}\n                label="Category"\n                required={true}\n                placeholder="Select category"\n                {...getInputProps("category.id")}\n                {...selectProps}\n            />\n        </Create>\n    );\n};\n')))),(0,a.kt)("p",null,"In the above example, we used the ",(0,a.kt)("inlineCode",{parentName:"p"},"useForm")," hook to manage the form. We passed the initial input values and field validation methods to the ",(0,a.kt)("inlineCode",{parentName:"p"},"useForm")," hook."),(0,a.kt)("p",null,"Open the ",(0,a.kt)("inlineCode",{parentName:"p"},"src/pages/posts/index.tsx")," file you created in one of the previous sub-sections and add the export statement below."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/pages/posts/index.tsx"',title:'"src/pages/posts/index.tsx"'},'...\n//highlight-next-line\nexport * from "./create";\n')),(0,a.kt)("p",null,"You can now import the ",(0,a.kt)("inlineCode",{parentName:"p"},"PostCreate")," component into the ",(0,a.kt)("inlineCode",{parentName:"p"},"App.tsx")," file and add it to the list of resources like so:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/App.tsx"',title:'"src/App.tsx"'},'...\nimport {\n  ...\n  //highlight-next-line\n  PostCreate,\n} from "./pages/posts";\n\nfunction App() {\n  return (\n    <MantineProvider theme={LightTheme} withNormalizeCSS withGlobalStyles>\n      <Global styles={{ body: { WebkitFontSmoothing: "auto" } }} />\n      <NotificationsProvider position="top-right">\n        <Refine\n          ...\n          resources={[\n            {\n              name: "posts",\n              list: PostList,\n              //highlight-next-line\n              create: PostCreate,\n            },\n          ]}\n        />\n      </NotificationsProvider>\n    </MantineProvider>\n  );\n}\n')),(0,a.kt)("p",null,"Clicking the create button will now navigate you to the ",(0,a.kt)("inlineCode",{parentName:"p"},"/posts/create")," page. The ",(0,a.kt)("inlineCode",{parentName:"p"},"/posts/create")," page looks like the image below. You can use it to create a new post. After filling and submitting the form with details of your post, it should now be available in the list of all posts."),(0,a.kt)("img",{src:"https://refine.ams3.cdn.digitaloceanspaces.com/blog%2F2023-02-23-refine-strapi-mantine%2Frefine-project-create-page.png",alt:"react admin panel"}),(0,a.kt)("h3",{id:"how-to-edit-a-record"},"How to edit a record"),(0,a.kt)("p",null,"In the previous section, we looked at creating a new post. It is also possible to edit an existing record. To edit records in our table, let us add an ",(0,a.kt)("inlineCode",{parentName:"p"},"Actions")," column. The column will have a button to edit the contents of each row in the table."),(0,a.kt)("p",null,"To add a new column to our table, add a column object to the ",(0,a.kt)("inlineCode",{parentName:"p"},"columns")," array we created in the ",(0,a.kt)("inlineCode",{parentName:"p"},"PostList")," component. We will render an ",(0,a.kt)("inlineCode",{parentName:"p"},"EditButton")," in our new column."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/pages/posts/list.tsx"',title:'"src/pages/posts/list.tsx"'},'import {\n  ...\n  //highlight-start\n  EditButton,\n  Group,\n  //highlight-end\n} from "@refinedev/mantine";\n\nconst columns = React.useMemo<ColumnDef<any>[]>(\n    () => [\n      ...\n      //highlight-start\n      {\n        id: "actions",\n        accessorKey: "id",\n        header: "Actions",\n        cell: ({ getValue }) => {\n          return (\n            <Group>\n              <EditButton\n                hideText\n                size="xs"\n                recordItemId={getValue() as number}\n                variant="subtle"\n              />\n            </Group>\n          );\n        },\n      },\n      //highlight-end\n    ],\n    []\n);\n')),(0,a.kt)("p",null,"After adding the code above, your table should include the ",(0,a.kt)("inlineCode",{parentName:"p"},"Actions")," column. Clicking the edit button at the moment will again redirect you to a non-existent page."),(0,a.kt)("img",{src:"https://refine.ams3.cdn.digitaloceanspaces.com/blog%2F2023-02-23-refine-strapi-mantine%2Factions_edit.png",alt:"react admin panel"}),(0,a.kt)("br",null),(0,a.kt)("p",null,"Let us create the component that will render when a user clicks the edit button. The component will contain a form for editing the contents of a specific record in our collection."),(0,a.kt)("p",null,"Create the ",(0,a.kt)("inlineCode",{parentName:"p"},"src/pages/posts/edit.tsx")," file into which copy and paste the code below."),(0,a.kt)("details",null,(0,a.kt)("summary",null,"Show code"),(0,a.kt)("p",null,(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/pages/posts/edit.tsx"',title:'"src/pages/posts/edit.tsx"'},'import {\n    Edit,\n    useForm,\n    TextInput,\n    Select,\n    useSelect,\n} from "@refinedev/mantine";\n\nimport { ICategory } from "interfaces";\n\nexport const PostEdit = () => {\n    const {\n        getInputProps,\n        saveButtonProps,\n        refineCore: { queryResult },\n    } = useForm({\n        initialValues: {\n            id: "",\n            title: "",\n            category: {\n                id: "",\n            },\n        },\n        refineCoreProps: {\n            metaData: {\n                populate: ["category"],\n            },\n        },\n        validate: {\n            title: (value) =>\n                value.length < 5\n                    ? "Title should be atleast 5 characters long"\n                    : null,\n            category: {\n                id: (value) => (value.length <= 0 ? "Title is required" : null),\n            },\n        },\n    });\n\n    const postData = queryResult?.data?.data;\n    const { selectProps } = useSelect<ICategory>({\n        resource: "categories",\n        defaultValue: postData?.category?.id,\n    });\n\n    return (\n        <Edit saveButtonProps={saveButtonProps}>\n            <TextInput mt="sm" disabled label="Id" {...getInputProps("id")} />\n            <TextInput\n                mt="sm"\n                required\n                label="Title"\n                {...getInputProps("title")}\n            />\n            <Select\n                mt={8}\n                label="Category"\n                required\n                placeholder="Select category"\n                {...selectProps}\n                {...getInputProps("category.id")}\n            />\n        </Edit>\n    );\n};\n')))),(0,a.kt)("p",null,"Add the export statement below to the ",(0,a.kt)("inlineCode",{parentName:"p"},"src/pages/posts/index.tsx")," file."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/pages/posts/index.tsx"',title:'"src/pages/posts/index.tsx"'},'//highlight-next-line\nexport * from "./edit";\n')),(0,a.kt)("p",null,"Finally, add the ",(0,a.kt)("inlineCode",{parentName:"p"},"PostEdit")," component to the ",(0,a.kt)("inlineCode",{parentName:"p"},"resources")," prop of your ",(0,a.kt)("inlineCode",{parentName:"p"},"Refine")," component."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/App.tsx"',title:'"src/App.tsx"'},'...\nimport {\n  ...\n  //highlight-next-line\n  PostEdit\n} from "./pages/posts";\n\nfunction App() {\n  return (\n    <MantineProvider theme={LightTheme} withNormalizeCSS withGlobalStyles>\n      <Global styles={{ body: { WebkitFontSmoothing: "auto" } }} />\n      <NotificationsProvider position="top-right">\n        <Refine\n          ...\n          resources={[\n            {\n              name: "posts",\n              list: PostList,\n              create: PostCreate,\n              //highlight-next-line\n              edit: PostEdit,\n            },\n          ]}\n        />\n      </NotificationsProvider>\n    </MantineProvider>\n  );\n}\n')),(0,a.kt)("p",null,"Clicking the edit button should now redirect you to a page for editing the contents of a specific record. The edit page will look like the image below."),(0,a.kt)("img",{src:"https://refine.ams3.cdn.digitaloceanspaces.com/blog%2F2023-02-23-refine-strapi-mantine%2Frefine-project-edit-page.png",alt:"react admin panel"}),(0,a.kt)("h3",{id:"how-to-delete-a-record"},"How to delete a record"),(0,a.kt)("p",null,"You can use two methods to delete records in a collection. These methods are:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Using the delete action button on each table row"),(0,a.kt)("li",{parentName:"ul"},"Using the delete button on the edit page")),(0,a.kt)("h4",{id:"how-to-add-delete-action-button-on-each-table-row"},"How to add delete action button on each table row"),(0,a.kt)("p",null,"Add the following import statement at the top of the ",(0,a.kt)("inlineCode",{parentName:"p"},"list.tsx")," file in the ",(0,a.kt)("inlineCode",{parentName:"p"},"src/pages/posts")," directory."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/pages/posts/list.tsx"',title:'"src/pages/posts/list.tsx"'},'import {\n ...\n //highlight-next-line\n  DeleteButton,\n} from "@refinedev/mantine";\n')),(0,a.kt)("p",null,"We will add the ",(0,a.kt)("inlineCode",{parentName:"p"},"DeleteButton")," we imported above to every row in our table under the ",(0,a.kt)("inlineCode",{parentName:"p"},"Actions")," column. The columns array we declared while creating the table in one of the sections above contains an object with the id ",(0,a.kt)("inlineCode",{parentName:"p"},"actions"),". That object defines our ",(0,a.kt)("inlineCode",{parentName:"p"},"Actions")," column. We will add the ",(0,a.kt)("inlineCode",{parentName:"p"},"DeleteButton")," to it."),(0,a.kt)("p",null,"The cell method of the ",(0,a.kt)("inlineCode",{parentName:"p"},"Actions")," column object returns the ",(0,a.kt)("inlineCode",{parentName:"p"},"Group")," Mantine UI component. Add the ",(0,a.kt)("inlineCode",{parentName:"p"},"DeleteButton")," so that it is a child of the ",(0,a.kt)("inlineCode",{parentName:"p"},"Group")," component like so:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/pages/posts/list.tsx"',title:'"src/pages/posts/list.tsx"'},'...\n\nconst columns = React.useMemo<ColumnDef<any>[]>(\n    () => [\n      ...\n      {\n        id: "actions",\n        accessorKey: "id",\n        header: "Actions",\n        cell: ({ getValue }) => {\n          return (\n            <Group noWrap>\n              <EditButton\n                hideText\n                size="xs"\n                recordItemId={getValue() as number}\n                variant="subtle"\n              />\n              //highlight-start\n              <DeleteButton\n                hideText\n                size="xs"\n                recordItemId={getValue() as number}\n                variant="subtle"\n              />\n              //highlight-end\n            </Group>\n          );\n        },\n      },\n    ],\n    []\n  );\n')),(0,a.kt)("p",null,"After making the above changes, your table will have the delete action button like in the image below. Click the delete button to delete a specific record."),(0,a.kt)("img",{src:"https://refine.ams3.cdn.digitaloceanspaces.com/blog%2F2023-02-23-refine-strapi-mantine%2Factions_delete.png",alt:"react admin panel"}),(0,a.kt)("h4",{id:"how-to-add-delete-button-on-the-edit-page"},"How to add delete button on the edit page"),(0,a.kt)("p",null,"Instead of adding a delete button to each row in a table, you can also add it to the edit page. This time, we will modify the ",(0,a.kt)("inlineCode",{parentName:"p"},"resources")," prop of the ",(0,a.kt)("inlineCode",{parentName:"p"},"Refine")," component. Add the ",(0,a.kt)("inlineCode",{parentName:"p"},"canDelete")," prop to the ",(0,a.kt)("inlineCode",{parentName:"p"},"posts")," resource like so:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/App.tsx"',title:'"src/App.tsx"'},'...\n\nfunction App() {\n  return (\n    <MantineProvider theme={LightTheme} withNormalizeCSS withGlobalStyles>\n      <Global styles={{ body: { WebkitFontSmoothing: "auto" } }} />\n      <NotificationsProvider position="top-right">\n        <Refine\n          ...\n          resources={[\n            {\n              name: "posts",\n              list: PostList,\n              create: PostCreate,\n              edit: PostEdit,\n              //highlight-next-line\n              canDelete: true,\n            },\n          ]}\n        />\n      </NotificationsProvider>\n    </MantineProvider>\n  );\n}\n')),(0,a.kt)("p",null,"Your edit page should now include a delete button on the bottom right."),(0,a.kt)("img",{src:"https://refine.ams3.cdn.digitaloceanspaces.com/blog%2F2023-02-23-refine-strapi-mantine%2Frefine-project-edit-page-with-delete-btn.png",alt:"react admin panel"}),(0,a.kt)("h2",{id:"how-to-implement-mutation-mode"},"How to implement mutation mode"),(0,a.kt)("p",null,"Mutation mode is a handy feature in refine when performing side effects. It can help you provide a better user experience to your clients. You can configure your refine app to use any of the three mutation modes below."),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Pessimistic"),(0,a.kt)("li",{parentName:"ul"},"Optimistic"),(0,a.kt)("li",{parentName:"ul"},"Undoable")),(0,a.kt)("h3",{id:"pessimistic-mutation-mode"},"Pessimistic mutation mode"),(0,a.kt)("p",null,"With pessimistic mutation mode, refine initiates the mutation immediately. It applies UI updates and redirects after the mutation update returns successfully. The pessimistic mode is the default mutation mode."),(0,a.kt)("h3",{id:"optimistic-mutation-mode"},"Optimistic mutation mode"),(0,a.kt)("p",null,"When using the optimistic mutation mode, refine applies the mutation locally and immediately updates UI and redirects without waiting for a response from the server. It updates the UI accordingly in case there is an error."),(0,a.kt)("h3",{id:"undoable-mutation-mode"},"Undoable mutation mode"),(0,a.kt)("p",null,"With the undoable mutation mode, refine applies the mutation locally, updates the UI, and redirects. It then waits for a customizable timeout before making the mutation. You can cancel the mutation update within the timeout. It also updates the UI if the mutation update returns an error."),(0,a.kt)("p",null,"You can configure the mutation mode using the ",(0,a.kt)("inlineCode",{parentName:"p"},"options")," prop of the ",(0,a.kt)("inlineCode",{parentName:"p"},"Refine")," component."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/App.tsx"',title:'"src/App.tsx"'},'...\nfunction App() {\n  return (\n    <MantineProvider theme={LightTheme}>\n      <Global styles={{ body: { WebkitFontSmoothing: "auto" } }} />\n      <NotificationsProvider position="top-right">\n        <Refine\n          ...\n          //highlight-next-line\n          options = {{ mutationMode: "optimistic"}}\n\n        />\n      </NotificationsProvider>\n    </MantineProvider>\n  );\n}\n')),(0,a.kt)("h2",{id:"how-to-share-the-current-page-with-filters"},"How to share the current page with filters"),(0,a.kt)("p",null,"With refine, it is possible to sync the URL with the contents of a page. Assuming the ",(0,a.kt)("inlineCode",{parentName:"p"},"posts")," page has a multi-page table sorted in ascending order, you can display the currently active page and the sort order in the URL using query parameters."),(0,a.kt)("p",null,"You can activate this feature by setting the ",(0,a.kt)("inlineCode",{parentName:"p"},"syncWithLocation")," property of the ",(0,a.kt)("inlineCode",{parentName:"p"},"options")," prop to ",(0,a.kt)("inlineCode",{parentName:"p"},"true"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/App.tsx"',title:'"src/App.tsx"'},'...\nfunction App() {\n  return (\n    <MantineProvider theme={LightTheme}>\n      <Global styles={{ body: { WebkitFontSmoothing: "auto" } }} />\n      <NotificationsProvider position="top-right">\n        <Refine\n          ...\n          //highlight-next-line\n          options = {{ syncWithLocation: true}}\n\n        />\n      </NotificationsProvider>\n    </MantineProvider>\n  );\n}\n')),(0,a.kt)("h2",{id:"using-the-refine-mantine-inferencer"},"Using the refine Mantine inferencer"),(0,a.kt)("p",null,"In the previous sections, we performed CRUD operations by building components from scratch. The refine ecosystem has the Inferencer package for generating CRUD pages based on the responses from your API."),(0,a.kt)("p",null,"The sole purpose of the Inferencer is to set you off by generating CRUD pages. You can then customize the components to suit your needs. Depending on your design system or component library, import Inferencer from the ",(0,a.kt)("inlineCode",{parentName:"p"},"@refinedev/inferencer")," package."),(0,a.kt)("p",null,"Since we are using Mantine as our components library, import and add ",(0,a.kt)("inlineCode",{parentName:"p"},"MantineInferencer")," to the ",(0,a.kt)("inlineCode",{parentName:"p"},"resources")," prop of the ",(0,a.kt)("inlineCode",{parentName:"p"},"Refine")," component like so:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/App.tsx"',title:'"src/App.tsx"'},'...\n//highlight-next-line\nimport { MantineInferencer } from "@refinedev/inferencer/mantine";\n\nfunction App() {\n  return (\n    <MantineProvider theme={LightTheme} withNormalizeCSS withGlobalStyles>\n      <Global styles={{ body: { WebkitFontSmoothing: "auto" } }} />\n      <NotificationsProvider position="top-right">\n        <Refine\n          ...\n          //highlight-start\n          resources={[\n            {\n              name: "posts",\n              list: MantineInferencer,\n              create: MantineInferencer,\n              show: MantineInferencer,\n              edit: MantineInferencer,\n              canDelete: true\n            },\n            {\n              name: "categories",\n              list: MantineInferencer,\n              create: MantineInferencer,\n              show: MantineInferencer,\n              edit: MantineInferencer,\n            },\n          ]}\n          //highlight-end\n        />\n      </NotificationsProvider>\n    </MantineProvider>\n  );\n}\n\n')),(0,a.kt)("p",null,"The code above will generate CRUD pages for you out of the box. Each of the other design systems or component libraries which refine supports has its corresponding Inferencer. Import and add it to your ",(0,a.kt)("inlineCode",{parentName:"p"},"<Refine>")," component as in the above example."),(0,a.kt)("h2",{id:"conclusion"},"Conclusion"),(0,a.kt)("p",null,"When looking to build a React admin panel, refine is one of the react frameworks worth exploring. As highlighted above, it supports most of the popular design systems and UI frameworks like Material UI, Ant design, Chakra UI, and Mantine."),(0,a.kt)("p",null,"Furthermore, refine has out-of-the-box support for authentication, i18n, routing, and state management. The refine command line tool can get you up and running instantly with all the necessary configurations for a basic refine project. You can modify the default settings to suit your needs."),(0,a.kt)("p",null,"All the refine features I have highlighted above will significantly increase your development speed, improve your development experience and reduce time to production, especially when building complex front-end applications."),(0,a.kt)("h2",{id:"live-codesandbox-example"},"Live CodeSandbox Example"),(0,a.kt)(h,{path:"blog-react-admin-mantine",mdxType:"CodeSandboxExample"}),(0,a.kt)("hr",null))}f.isMDXComponent=!0}}]);